name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'services/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: medisupply-cluster

jobs:
  # Detect which services changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      orders-changed: ${{ steps.changes.outputs.orders }}
      inventory-changed: ${{ steps.changes.outputs.inventory }}
      prometheus-changed: ${{ steps.changes.outputs.prometheus }}
      grafana-changed: ${{ steps.changes.outputs.grafana }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            orders:
              - 'services/orders-service/**'
            inventory:
              - 'services/inventory-service/**'
            prometheus:
              - 'services/prometheus/**'
            grafana:
              - 'services/grafana/**'

  # Build and deploy Orders Service
  deploy-orders:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.orders-changed == 'true'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::501257812093:role/medisupply-github-actions-role
          role-session-name: GitHubActions-OrdersService
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: medisupply/orders-service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd services/orders-service

          # Build image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Push images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "âœ… Orders service image pushed to ECR"
          echo "ðŸ“¦ Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy to ECS via CodeDeploy Blue-Green
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: medisupply/orders-service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "ðŸš€ Starting Blue-Green deployment for Orders Service..."

          # Use the deployment script for proper blue-green deployment
          chmod +x scripts/deploy-service.sh
          ./scripts/deploy-service.sh orders-service $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          echo "âœ… Orders Service Blue-Green deployment initiated"
          echo "ðŸ”„ Linear traffic shifting: 10% every minute over 10 minutes"

  # Build and deploy Inventory Service
  deploy-inventory:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.inventory-changed == 'true'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::501257812093:role/medisupply-github-actions-role
          role-session-name: GitHubActions-InventoryService
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: medisupply/inventory-service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd services/inventory-service

          # Build image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Push images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "âœ… Inventory service image pushed to ECR"
          echo "ðŸ“¦ Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy to ECS via CodeDeploy Blue-Green
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: medisupply/inventory-service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "ðŸš€ Starting Blue-Green deployment for Inventory Service..."

          # Use the deployment script for proper blue-green deployment
          chmod +x scripts/deploy-service.sh
          ./scripts/deploy-service.sh inventory-service $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          echo "âœ… Inventory Service Blue-Green deployment initiated"
          echo "ðŸ”„ Linear traffic shifting: 10% every minute over 10 minutes"

  # Build and deploy Prometheus (using custom image)
  deploy-prometheus:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.prometheus-changed == 'true'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::501257812093:role/medisupply-github-actions-role
          role-session-name: GitHubActions-Prometheus
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Prometheus Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: medisupply/prometheus
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd services/prometheus

          # Build custom Prometheus image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Push images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "âœ… Custom Prometheus image pushed to ECR"
          echo "ðŸ“¦ Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy Prometheus with rolling update
        run: |
          echo "ðŸš€ Deploying Prometheus using custom Docker image with rolling update..."

          # Update ECS service with new task definition using custom image
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service medisupply-prometheus \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "âœ… Prometheus rolling update deployment initiated"
          echo "ðŸ“¦ Using custom image: medisupply/prometheus:latest"

  # Build and deploy Grafana (using custom image)
  deploy-grafana:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.grafana-changed == 'true'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::501257812093:role/medisupply-github-actions-role
          role-session-name: GitHubActions-Grafana
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Grafana Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: medisupply/grafana
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd services/grafana

          # Build custom Grafana image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Push images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "âœ… Custom Grafana image pushed to ECR"
          echo "ðŸ“¦ Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy Grafana with rolling update
        run: |
          echo "ðŸš€ Deploying Grafana using custom Docker image with rolling update..."

          # Update ECS service with new task definition using custom image
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service medisupply-grafana \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "âœ… Grafana rolling update deployment initiated"
          echo "ðŸ“¦ Using custom image: medisupply/grafana:latest"

  # Deploy all services (manual trigger)
  deploy-all:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::501257812093:role/medisupply-github-actions-role
          role-session-name: GitHubActions-DeployAll
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push all services
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "ðŸš€ Building and pushing all services..."

          # Build Orders Service
          cd services/orders-service
          docker build -t $ECR_REGISTRY/medisupply/orders-service:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/medisupply/orders-service:$IMAGE_TAG $ECR_REGISTRY/medisupply/orders-service:latest
          docker push $ECR_REGISTRY/medisupply/orders-service:$IMAGE_TAG
          docker push $ECR_REGISTRY/medisupply/orders-service:latest
          echo "âœ… Orders service pushed"

          # Build Inventory Service
          cd ../inventory-service
          docker build -t $ECR_REGISTRY/medisupply/inventory-service:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/medisupply/inventory-service:$IMAGE_TAG $ECR_REGISTRY/medisupply/inventory-service:latest
          docker push $ECR_REGISTRY/medisupply/inventory-service:$IMAGE_TAG
          docker push $ECR_REGISTRY/medisupply/inventory-service:latest
          echo "âœ… Inventory service pushed"

          # Build Prometheus
          cd ../prometheus
          docker build -t $ECR_REGISTRY/medisupply/prometheus:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/medisupply/prometheus:$IMAGE_TAG $ECR_REGISTRY/medisupply/prometheus:latest
          docker push $ECR_REGISTRY/medisupply/prometheus:$IMAGE_TAG
          docker push $ECR_REGISTRY/medisupply/prometheus:latest
          echo "âœ… Custom Prometheus image pushed"

          # Build Grafana
          cd ../grafana
          docker build -t $ECR_REGISTRY/medisupply/grafana:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/medisupply/grafana:$IMAGE_TAG $ECR_REGISTRY/medisupply/grafana:latest
          docker push $ECR_REGISTRY/medisupply/grafana:$IMAGE_TAG
          docker push $ECR_REGISTRY/medisupply/grafana:latest
          echo "âœ… Custom Grafana image pushed"

          echo "âœ… All services built and pushed with custom images"

      - name: Deploy all services via CodeDeploy Blue-Green
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "ðŸš€ Starting Blue-Green deployment for all services..."

          # Make deployment script executable
          chmod +x scripts/deploy-service.sh

          # Deploy all services with blue-green deployment
          echo "ðŸ“¦ Deploying Orders Service..."
          ./scripts/deploy-service.sh orders-service $ECR_REGISTRY/medisupply/orders-service:$IMAGE_TAG

          echo "ðŸ“¦ Deploying Inventory Service..."
          ./scripts/deploy-service.sh inventory-service $ECR_REGISTRY/medisupply/inventory-service:$IMAGE_TAG

          echo "ðŸ“¦ Deploying Prometheus with custom image..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service medisupply-prometheus \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "ðŸ“¦ Deploying Grafana with custom image..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service medisupply-grafana \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "âœ… All services deployments initiated!"
          echo "ðŸ”„ Microservices using Blue-Green deployment (10% every minute over 10 minutes)"
          echo "ðŸ“Š Monitoring services using rolling update with custom images"